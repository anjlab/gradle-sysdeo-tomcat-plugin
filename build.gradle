apply plugin: 'groovy'
apply plugin: 'eclipse'

group = 'com.anjlab'
version = '1.0.4'
description = 'Gradle plugin for generating ".tomcatplugin" artifact for Sysdeo/Uqbar Eclipse Tomcat Launcher Plugin'

dependencies {
    compile gradleApi()
    compile localGroovy()
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://jcenter.bintray.com' }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.5.0'
    }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'license'

license {
    header rootProject.file('LICENSE')
    strictCheck true
}

apply plugin: 'bintray'

bintray {
    user = "$System.env.bintray_user"
    key = "$System.env.bintray_api_key"
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        userOrg = 'anjlab' // an optional organization name when the repo belongs to one of the user's orgs
        licenses = ['Apache-2.0']
        
        labels = ["eclipse", "gradle", "tomcat", "sysdeo"]
    }
    dryRun = false // whether to run this as dry-run, without deploying
}

bintray.pkg.name = name
bintray.pkg.desc = description

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

jar.dependsOn sourcesJar

def pomFragments = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "dmitrygusev"
            name "Dmitry Gusev"
            email "dmitry@anjlab.com"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            
            pom.withXml {
                def root = asNode()
                
                def deps = root.children().find {
                    it.name().localPart == 'dependencies'
                }
                
                root.children().remove(deps)
                
                root.appendNode('description', project.description)
                root.children().last() + pomFragments
                
                def pom = new XmlParser().parse(project.file("build/poms/pom-default.xml"))
                
                pom.dependencies.each {
                    root.append(it)
                }
            }
        }
    }
}
